{"version":3,"sources":["components/AddCategory.js","helpers/getGif.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cat","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","res","json","data","gifs","map","element","id","title","images","original","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","img","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"iMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAC5B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAcA,OACE,uBAAMC,SATa,SAACC,GACpBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAUP,GAAV,mBAAwBO,OACtCN,EAAc,MAKhB,UACE,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAdtB,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACrBV,EAAcU,EAAOF,UAcnB,gD,+BCnBOG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,0FAE6EC,UAAUH,GAFvF,sBAGDI,MAAMF,GAHL,cAGbG,EAHa,gBAIIA,EAAIC,OAJR,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAElB,MAAO,CACHC,GAAID,EAAQC,GACZC,MAAOF,EAAQE,MACfV,IAAKQ,EAAQG,OAAOC,SAASZ,QAXlB,kBAcZM,GAdY,4CAAH,sDCAPO,EAAc,SAAC,GAAkB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAChC,OACI,sBAAKc,UAAU,gDAAf,UACI,6BAAKJ,IACL,qBAAKK,IAAKf,EAAKgB,IAAKN,QCFnBO,EAAU,SAAC,GAAkB,IAEtC,ECFwB,SAACnB,GAEzB,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAiBA,OAZAC,qBAAU,WACNxB,EAAQC,GACPwB,MAAM,SAAAC,GACHH,EACI,CACIf,KAAMkB,EACNL,SAAS,SAItB,CAACpB,IAEGqB,EDjByBK,CAFK,EAAf1B,UAEdoB,EAAR,EAAQA,QAAeK,EAAvB,EAAiBlB,KAEjB,OACI,qCACMa,GAAW,yCAEb,qBAAKJ,UAAU,QAAf,SAEIS,EAAKhB,KAAI,SAAAkB,GACL,OACI,cAAC,EAAD,eAA8BA,GAAZA,EAAIhB,aEZjCiB,EAAe,WAC1B,MAAoC1C,mBAAS,CAAC,KAA9C,mBAAO2C,EAAP,KAAmB5C,EAAnB,KAEA,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BAEM4C,EAAWpB,KAAI,SAACT,GAAD,OACb,cAAC,EAAD,CAA0BA,SAAWA,GAAtBA,YCV7B8B,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.5801a19f.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n\r\n  const handleInput = ({ target }) => {\r\n    setInputValue(target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (inputValue.trim().length > 3) {\r\n      setCategories((cat) => [inputValue,...cat]);\r\n      setInputValue(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input type=\"text\" value={inputValue} onChange={handleInput} />\r\n      <button>Buscar</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired,\r\n};\r\n","\r\n\r\nexport const getGifs = async (category) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=uHtrTF8vLJg1j1k8gJAQC5ffMzaPdvcT&q=${ encodeURI(category) }&limit=10`;\r\n    const res = await fetch(url);\r\n    const { data } = await res.json();\r\n\r\n    const gifs = data.map(element => {\r\n\r\n        return {\r\n            id: element.id,\r\n            title: element.title,\r\n            url: element.images.original.url,\r\n        }\r\n    })\r\n    return gifs;\r\n} ","import React from 'react'\r\n\r\nexport const GifGridItem = ({title, url}) => {\r\n    return (\r\n        <div className='card animate__animated animate__fadeInTopLeft'>\r\n            <h1>{title}</h1>\r\n            <img src={url} alt={title} />\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    const { loading, data: imgs } = useFetchGifs(category);\r\n\r\n    return (\r\n        <>\r\n            { loading && <h1>Loading</h1>}\r\n\r\n            <div className='cards'>\r\n            {\r\n                imgs.map(img => {\r\n                    return (\r\n                        <GifGridItem key={img.id} {...img} />\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import { useState, useEffect } from \"react\";\r\nimport { getGifs } from '../helpers/getGif';\r\n\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n    \r\n    useEffect(() => {\r\n        getGifs(category)\r\n        .then( imgs => {\r\n            setstate(\r\n                {\r\n                    data: imgs,\r\n                    loading: false\r\n                }\r\n            )\r\n        })\r\n    }, [category])\r\n\r\n    return state;\r\n}","import React, { useState } from \"react\";\r\nimport { AddCategory } from \"./components/AddCategory\";\r\nimport { GifGrid } from \"./components/GifGrid\";\r\n\r\nexport const GifExpertApp = () => {\r\n  const [categories, setCategories] = useState(['']);\r\n\r\n  return (\r\n    <>\r\n      <h2>GifExpertApp</h2>\r\n      <AddCategory setCategories={setCategories} />\r\n      <hr />\r\n      <ul>\r\n          {\r\n            categories.map((category) => (\r\n              <GifGrid key={ category } category={ category } />\r\n            ))\r\n          }\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { GifExpertApp } from \"./GifExpertApp\";\n\nReactDOM.render(<GifExpertApp />, document.getElementById(\"root\"));\n"],"sourceRoot":""}